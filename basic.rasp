;
; What follows are some very basic definitions for reading strings, writing
; strings, etc
;
; Note that user defined functions start with the @ sign. This is just convention,
; it is not required. The same goes for built-in functions that are evaluated 
; at compile time and the & sign.
;
; Also note that types start with the : sign. It has not been decided if this is
; to be recognized as its own token type (for parsing's sake) or if it is merely
; a convention.
;
; The ? symbol in a parameter list for a function denotes that it's optional

; Here is a list of the builtins:
; &include
; &define
; &extern
; &type
; car
; cdr
; list
; append
; list-to-string
; string-to-list

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; INCLUDES
(&include "string.rasp")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; TYPEDEFS

; Watch the compiler fail, uncomment this line
; (&type :bad_type :other_bad_type)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; UTILITY FUNCTIONS

(&define @reverse (l :listy)
    "Finds the reverse of a listy object"
    (if (nil? l)
        nil
        (append (@reverse (cdr l)) (list (car l)))))

(&define @len (s :listy)
    "Finds the length of a listy object"
    (if (nil? s)
        0
        (+ 1 (@len (cdr s)))))

(&define @sublist-start (s :listy start :int)
    "Finds a sublist from a given start"
    (if (= start 0)
        s
    (if (= start 1)
        (cdr s)
        (@sublist (cdr s) (- start 1)))))

(&define @sublist-length (s :listy len :int)
    "Trims a string down to a given length"
    (let slen (@len s)
        (if (< slen len)
            s
            (@reverse (@sublist -start (@reverse s) (- slen len))))))

(&define @sublist (s :listy start :int ? leng :int)
    "Finds a sublist of a list with a start parameter and an optional end parameter"
    (if leng
        (@sublist-length (@sublist-start s start) leng)
        (@sublist-start s start)))

